import crypto from 'crypto'

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY
const IV = 'IV'

/**
 * @todo CSRF token generation from API Key
 */
export function generateRequestAuthentication(req, res, next) {
  // NOT REAL KEYS
  const APIKEY = 'qWertT2uiOp2lkjhgfD5Sa2zxcvBn831'
  const SECRET = 'edcyTG6hg7ETGutghyrYHFLII7HCyjfh5yjYJKGHfyt7srDJ67jf78khvr' // later generated by algo

  const { shared } = req.body

  // Set unique CSRF Tokens
  // 1. you send the shared apiKey
  // 2. I use the current apiSecret to generate CSRF access token
  // -- accessToken = sha512( apiKey + '\\' + apiSecret ).digest(base64)
  // 3. I send the access token to you

  // Every 100 transactions the apiSecret is changed

  const token = crypto.createHmac('sha512', APIKEY).update(SECRET).digest('base64')

  if(shared===APIKEY) 
    res.send({ token })
  else
    res.sendStatus(403)
}

/**
 * @todo
 * CSRF Secret generation on server restart
 * using fixed generator and random prime
 */
export function s() {

}

/** 
 * @todo
 * CSRF according to access level
 */

/** 
 * @todo
 * Access token generation according to access level
 */

/** 
 * @todo
 * Unique Login token generation acc. to access level
 */